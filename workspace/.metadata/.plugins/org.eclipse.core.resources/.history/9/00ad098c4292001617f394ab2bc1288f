/*
 * buttons.h
 *
 *  Created on: Oct 14, 2016
 *      Author: l_vis
 */

#ifndef PROGRAM_PERIPH_BLINKY_INC_BUTTONS_H_
#define PROGRAM_PERIPH_BLINKY_INC_BUTTONS_H_

#include <stdbool.h>

#define BUTTONS_DEF_DEB_T 200 // [ms]

//*****************************************************************************
//
// Defines for the hardware resources used by the pushbuttons.
//
// The switches are on the following ports/pins:
//
// PM0 - Up
// PM1 - Down
// PM2 - Left
// PM3 - Right
// PM4 - Select/Wake
//
// The switches tie the GPIO to ground, so the GPIOs need to be configured
// with pull-ups, and a value of 0 means the switch is pressed.
//
//*****************************************************************************
#define BUTTONS_GPIO_PERIPH     SYSCTL_PERIPH_GPIOM
#define BUTTONS_GPIO_BASE       GPIO_PORTM_BASE

#define NUM_BUTTONS             5
#define UP_BUTTON               GPIO_PIN_0
#define DOWN_BUTTON             GPIO_PIN_1
#define LEFT_BUTTON             GPIO_PIN_2
#define RIGHT_BUTTON            GPIO_PIN_3
#define SELECT_BUTTON           GPIO_PIN_4

#define ALL_BUTTONS             (LEFT_BUTTON | RIGHT_BUTTON | UP_BUTTON |     \
                                 DOWN_BUTTON | SELECT_BUTTON)

//*****************************************************************************
//
// Useful macros for detecting button events.
//
//*****************************************************************************
#define BUTTON_PRESSED(button, buttons, changed)                              \
        (((button) & (changed)) && ((button) & (buttons)))

#define BUTTON_RELEASED(button, buttons, changed)                             \
        (((button) & (changed)) && !((button) & (buttons)))

/* initialize board's buttons driver */
void Buttons_Init(void);

/** initialize board's buttons driver with debounce
 *
 * @param debT: stabilization period in ms
 */
void Buttons_InitDeb(uint32_t debT);

/** Debounce stabilization period setter
 *
 * @param debT: stabilization period in ms
 */
void Buttons_SetDebT(uint32_t debT);

/** Polls all buttons without deboucing
 *
 * @return raw button states masked byte (masks: BUTTONS_TEC[n])
 */
uint8_t Buttons_PollAll(void);

/** Polls button without deboucing
 *
 * @param buttonMask: button's byte mask
 * @return button's raw state (true if pressed false otherwise)
 */
bool Buttons_Poll(uint8_t buttonMask);


/** Polls all buttons with deboucing
 *
 * @param currentT: current time in ms
 * @return debounced button states masked byte (masks: BUTTONS_TEC[n])
 */
uint8_t Buttons_PollDebAll(uint32_t currentT);

/** Polls button with deboucing
 *
 * @param buttonMask: button's byte mask
 * @param currentT: current time in ms
 * @return button's debounced state (true if pressed false otherwise)
 */
bool Buttons_PollDeb(uint8_t buttonMask, uint32_t currentT);


//*****************************************************************************
//
// If building with a C++ compiler, make all of the definitions in this header
// have a C binding.
//
//*****************************************************************************
#ifdef __cplusplus
extern "C"
{
#endif

//*****************************************************************************
//
// Functions exported from buttons.c
//
//*****************************************************************************
extern void ButtonsInit(void);
extern uint8_t ButtonsPoll(uint8_t *pui8Delta,
                                 uint8_t *pui8Raw);

//*****************************************************************************
//
// Mark the end of the C bindings section for C++ compilers.
//
//*****************************************************************************
#ifdef __cplusplus
}
#endif

//*****************************************************************************
//
// Prototypes for the globals exported by this driver.
//
//*****************************************************************************


#endif /* PROGRAM_PERIPH_BLINKY_INC_BUTTONS_H_ */
